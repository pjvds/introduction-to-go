The Go Programming Language
19:00 6 Mar 2014
Tags: introduction, go, joy of coding

Pieter Joost van de Sande
Gopher, Happy Pancake

@pjvds
http://born2code.net

* Go

- New
- Experimental
- Concurrent
- Garbage-collected
- Systems language
- Staticly typed

* Hello, world

.play helloworld.go

* The origins of Go

Developed by:

- *Robert* *Griesemer*: Google V8 GoogleFS 
- *Rob* *Pike*: Newsqueak, Plan9 OS, Limbo programming language  
- *Ken* *Thompson*: Unix, B programming language, UTF-8

Timeline:

- 2007: started
- 2009: open sourced
- 2012: version 1

* Go's design goals

	"The goals of the Go project were to eliminate the slowness and clumsiness of
	 software development at Google"

source: "Go at Google: Language Design in the Service of Software Engineering"

* Simple

- Small
- Readable
- Consistant
- Predictable
- Robust
- Safe
- Useful by default

* Go at a glance

- Compiled
- Staticly typed
- Clean syntax
- Concurrent primitives
- Rich standard library
- Great tools
- Open source

* Simple

* Language spec size

- *Go,* *43* *pages*
- Scheme, 50 pages
- Javascript, 245 pages
- Smalltalk, 304 pages
- Haskell, 309 pages
- Ruby, 311 pages
- C#, 512 pages
- C, 538 pages
- Java, 644 pages
- C++, 879 pages

* Key words

- Smalltalk (6)
- *Go* *(25):*
- C# (104)
- Java (50)
- Ruby (43)

* Go keywords

    break        default      func         interface    select
    case         defer        go           map          struct
    chan         else         goto         package      switch
    const        fallthrough  if           range        type
    continue     for          import       return       var

* C# keywords

    abstract    descending  implicit    params          this
    add         do          in          partial         throw
    alias       double      in          partial (type)  true
    as          dynamic     int         private         try
    ascending   else        interface   protected       typeof
    async       enum        internal    public          uint
    await       event       into        readonly        ulong
    base        explicit    is          ref             unchecked
    bool        extern      join        remove          unsafe
    break       false       let         return          ushort
    byte        finally     lock        sbyte           using
    case        fixed       long        sealed          value
    catch       float       namespace   select          var
    char        for         new         set             virtual
    checked     foreach     null        short           void
    class       from        object      sizeof          volatile
    const       get         operator    stackalloc      where (generic type constraint)
    continue    global      orderby     static          where (query clause)
    decimal     goto        out         string          while
    default     group       out (generic modifier)      struct  
    delegate    if          override    switch          yield

* Access modifier, members

.code access-modifiers/1.go /^type MyStruct/,/^}/

* Access modifier, func

.code access-modifiers/1.go /START OMIT/,/END OMIT/

* Types

    type Circle struct {
        x float64
        y float64
        r float64
    }

    type Writer func(date []byte) (n int, err error)

    type Guid [16]byte

* Attach methods

    type Circle struct {
        x float64
        y float64
        r float64
    }

    func (c *Circle) Area() float64 {
        return math.Pi * c.r*c.r
    } 

* Interface

    type Shape interface {
        Area() float64
    }

    func TotalArea(shapes ...Shape) (area float64) {
        for _, s := range shapes {
            area += s.area() // HL
        }
        return area
    }

* Consistant

* go fmt

Gofmt is a tool that automatically formats Go source code.

Gofmt'd code is: 

- easier to write: never worry about minor formatting concerns while hacking away,

- easier to read: when all code looks the same you need not mentally convert others' formatting style into something you can understand.

- easier to maintain: mechanical changes to the source don't cause unrelated changes to the file's formatting; diffs show only the real changes.

- uncontroversial: never have a debate about spacing or brace position ever again!

* Before

.code fmt/before.go

* After

.code fmt/after.go

* Simple control

* defer

Go's defer statement schedules a function call  to be run immediately before the function executing the defer returns.

.code defer/1.go /^func CountLines/,/^}/

* advanced defer

.code defer/3.go /START OMIT/,/END OMIT/

* Error handling

* Error as result

.code errors/1.go /^func TellMe/,/^}/

* Invoke it

.code errors/1.go /^func TellMe/,/^}/
.play errors/1.go /^func main/,/^}/

* Go Routines

* Boring talk method

.code goroutines/1.go /^func talk/,/^}/

* Invoke it

.play goroutines/1.go /START OMIT/,/END OMIT/

* Two talking

.play goroutines/2.go /START OMIT/,/END OMIT/

* Talking together

.play goroutines/3.go /START OMIT/,/END OMIT/

* Channels

* Channels

- Go's way to synchronize
- They are blocking
- They can be bufferred

* Talking together

.play channels/1.go /START OMIT/,/END OMIT/

* Talking together

.play channels/2.go /START OMIT/,/END OMIT/

* Go build system

- Go works from code, and code only
- One of the fastest compilers in the world

* Imports

Code:

    package main

    import (
        "flag"
        "fmt"

        "github.com/coreos/go-etcd/etcd"
        "github.com/happypancake/nanobus/client"
        "github.com/happypancake/nanobus/request"
        "github.com/op/go-logging"
    )

    // ...

Get dependencies:

    $ go get

* You wanne Go?

- GoSublime package for Sublime Text 2/3
- VIM tools ship out of the box
- Goclipse